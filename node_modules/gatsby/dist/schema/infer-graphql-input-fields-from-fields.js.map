{"version":3,"sources":["../../src/schema/infer-graphql-input-fields-from-fields.js"],"names":["inferInputObjectStructureFromFields","require","GraphQLInputObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLEnumType","GraphQLNonNull","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","_","report","createTypeName","createKey","makeNullable","type","ofType","convertToInputType","name","fields","transform","getFields","out","fieldConfig","key","innerType","message","verbose","scalarFilterMap","Int","eq","ne","Float","String","regex","glob","Boolean","convertToInputFilter","prefix","upperFirst","innerFilter","innerFields","in","extractFieldNamesFromInputField","accu","push","each","typeName","inferredFields","sort","inputType","inputFilter"],"mappings":"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","file":"infer-graphql-input-fields-from-fields.js","sourcesContent":["// @flow\n\nconst {\n  GraphQLInputObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLEnumType,\n  GraphQLNonNull,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n} = require(`graphql`)\n\nimport type { GraphQLInputType, GraphQLType } from \"graphql\"\n\nconst _ = require(`lodash`)\nconst report = require(`../reporter`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\n\ntype GraphQLNullableInputType<T> =\n  | GraphQLScalarType\n  | GraphQLEnumType\n  | GraphQLInputObjectType\n  | GraphQLList<T>\n\nfunction makeNullable(type: GraphQLInputType): GraphQLNullableInputType<any> {\n  if (type instanceof GraphQLNonNull) {\n    return type.ofType\n  }\n  return type\n}\n\nfunction convertToInputType(type: GraphQLType): ?GraphQLInputType {\n  if (type instanceof GraphQLScalarType || type instanceof GraphQLEnumType) {\n    return type\n  } else if (type instanceof GraphQLObjectType) {\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${type.name}InputObject`),\n      fields: _.transform(type.getFields(), (out, fieldConfig, key) => {\n        const type = convertToInputType(fieldConfig.type)\n        if (type) out[key] = { type }\n      }),\n    })\n  } else if (type instanceof GraphQLList) {\n    let innerType = convertToInputType(type.ofType)\n    return innerType ? new GraphQLList(makeNullable(innerType)) : null\n  } else if (type instanceof GraphQLNonNull) {\n    let innerType = convertToInputType(type.ofType)\n    return innerType ? new GraphQLNonNull(makeNullable(innerType)) : null\n  } else {\n    let message = type ? `for type: ${type.name}` : ``\n    if (type instanceof GraphQLInterfaceType) {\n      message = `GraphQLInterfaceType not yet implemented ${message}`\n    } else if (type instanceof GraphQLUnionType) {\n      message = `GraphQLUnionType not yet implemented ${message}`\n    } else {\n      message = `Invalid input type ${message}`\n    }\n    report.verbose(message)\n  }\n\n  return null\n}\n\nconst scalarFilterMap = {\n  Int: {\n    eq: { type: GraphQLInt },\n    ne: { type: GraphQLInt },\n  },\n  Float: {\n    eq: { type: GraphQLFloat },\n    ne: { type: GraphQLFloat },\n  },\n  String: {\n    eq: { type: GraphQLString },\n    ne: { type: GraphQLString },\n    regex: { type: GraphQLString },\n    glob: { type: GraphQLString },\n  },\n  Boolean: {\n    eq: { type: GraphQLBoolean },\n    ne: { type: GraphQLBoolean },\n  },\n}\n\nfunction convertToInputFilter(\n  prefix: string,\n  type: GraphQLInputType\n): ?GraphQLInputObjectType {\n  if (type instanceof GraphQLScalarType) {\n    const name = type.name\n    const fields = scalarFilterMap[name]\n\n    if (fields == null) return null\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}Query${name}`),\n      fields: fields,\n    })\n  } else if (type instanceof GraphQLInputObjectType) {\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}{type.name}`),\n      fields: _.transform(type.getFields(), (out, fieldConfig, key) => {\n        const type = convertToInputFilter(\n          `${prefix}${_.upperFirst(key)}`,\n          fieldConfig.type\n        )\n        if (type) out[key] = { type }\n      }),\n    })\n  } else if (type instanceof GraphQLList) {\n    const innerType = type.ofType\n    const innerFilter =\n      convertToInputFilter(`${prefix}ListElem`, innerType) || {}\n\n    const innerFields = innerFilter ? innerFilter.getFields() : {}\n\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}QueryList`),\n      fields: {\n        ...innerFields,\n        in: { type: new GraphQLList(innerType) },\n      },\n    })\n  } else if (type instanceof GraphQLNonNull) {\n    return convertToInputFilter(prefix, type.ofType)\n  }\n\n  return null\n}\n\nfunction extractFieldNamesFromInputField(\n  prefix: string,\n  type: GraphQLInputType,\n  accu: string[]\n) {\n  if (type instanceof GraphQLScalarType || type instanceof GraphQLList) {\n    accu.push(prefix)\n  } else if (type instanceof GraphQLInputObjectType) {\n    _.each(type.getFields(), (fieldConfig, key) => {\n      extractFieldNamesFromInputField(\n        `${prefix}___${key}`,\n        fieldConfig.type,\n        accu\n      )\n    })\n  } else if (type instanceof GraphQLNonNull) {\n    extractFieldNamesFromInputField(prefix, type.ofType, accu)\n  }\n}\n\n// convert output fields to output fields and a list of fields to sort on\nexport function inferInputObjectStructureFromFields({\n  fields,\n  typeName = ``,\n}: any) {\n  const inferredFields = {}\n  const sort = []\n\n  _.each(fields, (fieldConfig, key) => {\n    const inputType = convertToInputType(fieldConfig.type)\n    const inputFilter =\n      inputType && convertToInputFilter(_.upperFirst(key), inputType)\n\n    if (!inputFilter) return\n\n    inferredFields[createKey(key)] = { type: inputFilter }\n\n    // Add sorting (but only to the top level).\n    if (typeName) {\n      extractFieldNamesFromInputField(key, inputType, sort)\n    }\n  })\n\n  return { inferredFields, sort }\n}\n"]}